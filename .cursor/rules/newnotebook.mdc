---
description: 项目布局和开发规范
globs: ["**/*.ipynb", "**/*.py", "**/*.md"]
alwaysApply: true
---

# 📁 项目布局规范

## 新建项目结构
每次创建新项目时，必须按照以下结构组织：

```
项目名称/
├── 项目名称.ipynb          # 主要的Jupyter Notebook文件
├── README.md               # 项目说明文档
└── scripts/                # 调试脚本目录（可选）
    ├── debug_*.py          # 调试脚本
    └── utils.py            # 工具函数
```

## 开发流程规范

### 1. 项目创建
- 为每个新项目创建独立的目录
- 目录名与项目名保持一致
- 必须包含同名的 `.ipynb` 文件和 `README.md` 文件

### 2. 代码调试流程
当 Notebook 中的 cell 出现代码错误时：

1. **创建调试脚本**：在项目目录下创建 `debug_*.py` 文件
2. **独立调试**：在 Python 脚本中调试和测试代码
3. **验证功能**：确保代码在脚本中运行正常
4. **更新 Notebook**：将调试好的代码复制回对应的 cell

### 3. 文件命名规范
- 主 Notebook：`项目名.ipynb`
- 调试脚本：`debug_功能名.py`
- 工具函数：`utils.py` 或 `helpers.py`
- 文档：`README.md`

### 4. 目录结构示例
```
3d-object-classification/
├── 3d-object-classification.ipynb
├── README.md
└── scripts/
    ├── debug_data_loading.py
    ├── debug_visualization.py
    └── utils.py

spatiotemporal-forecasting/
├── spatiotemporal-forecasting.ipynb
├── README.md
└── scripts/
    ├── debug_model_training.py
    └── data_utils.py
```

## 开发建议

### Notebook 使用原则
- 保持 cell 简洁，每个 cell 专注单一功能
- 复杂逻辑优先在 Python 脚本中开发
- 使用 `%run` 魔法命令调用外部脚本
- 定期保存和清理输出

### 调试最佳实践
- 遇到错误时，立即创建对应的调试脚本
- 在脚本中使用 `print()` 和 `pdb` 进行调试
- 使用 `if __name__ == "__main__":` 保护主执行代码
- 调试完成后，将工作代码复制回 Notebook

### 代码组织
- 将可复用的函数提取到 `utils.py`
- 使用相对导入管理模块依赖
- 保持 Notebook 的可读性和可维护性
